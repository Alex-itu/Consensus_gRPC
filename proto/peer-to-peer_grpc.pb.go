//syntax = "proto3";
//
//option go_package = "github.com/Alex-itu/Consensus_gRPC/proto";
//
//package proto;
//
//// compile command:
//// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/peer-to-peer.proto
//
//// if you need to target a port or localhost (or ip address)
//// go run main.go -port=1234 -target="localhost:5678"
////
//
//
//service CriticalSection {
//rpc SendMessage (stream AccessRequest) returns (stream AccessResponse);
//}
//
//message AccessRequest {
//string node_id = 1;
//}
//
//message AccessResponse {
//string response = 1;
//}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/peer-to-peer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TokenService_TokenChat_FullMethodName = "/helloservice.TokenService/tokenChat"
)

// TokenServiceClient is the client API for TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenServiceClient interface {
	// change these names
	TokenChat(ctx context.Context, opts ...grpc.CallOption) (TokenService_TokenChatClient, error)
}

type tokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenServiceClient(cc grpc.ClientConnInterface) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) TokenChat(ctx context.Context, opts ...grpc.CallOption) (TokenService_TokenChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenService_ServiceDesc.Streams[0], TokenService_TokenChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenServiceTokenChatClient{stream}
	return x, nil
}

type TokenService_TokenChatClient interface {
	Send(*TokenRequest) error
	Recv() (*TokenRequest, error)
	grpc.ClientStream
}

type tokenServiceTokenChatClient struct {
	grpc.ClientStream
}

func (x *tokenServiceTokenChatClient) Send(m *TokenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tokenServiceTokenChatClient) Recv() (*TokenRequest, error) {
	m := new(TokenRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TokenServiceServer is the server API for TokenService service.
// All implementations must embed UnimplementedTokenServiceServer
// for forward compatibility
type TokenServiceServer interface {
	// change these names
	TokenChat(TokenService_TokenChatServer) error
	mustEmbedUnimplementedTokenServiceServer()
}

// UnimplementedTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenServiceServer struct {
}

func (UnimplementedTokenServiceServer) TokenChat(TokenService_TokenChatServer) error {
	return status.Errorf(codes.Unimplemented, "method TokenChat not implemented")
}
func (UnimplementedTokenServiceServer) mustEmbedUnimplementedTokenServiceServer() {}

// UnsafeTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenServiceServer will
// result in compilation errors.
type UnsafeTokenServiceServer interface {
	mustEmbedUnimplementedTokenServiceServer()
}

func RegisterTokenServiceServer(s grpc.ServiceRegistrar, srv TokenServiceServer) {
	s.RegisterService(&TokenService_ServiceDesc, srv)
}

func _TokenService_TokenChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TokenServiceServer).TokenChat(&tokenServiceTokenChatServer{stream})
}

type TokenService_TokenChatServer interface {
	Send(*TokenRequest) error
	Recv() (*TokenRequest, error)
	grpc.ServerStream
}

type tokenServiceTokenChatServer struct {
	grpc.ServerStream
}

func (x *tokenServiceTokenChatServer) Send(m *TokenRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tokenServiceTokenChatServer) Recv() (*TokenRequest, error) {
	m := new(TokenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TokenService_ServiceDesc is the grpc.ServiceDesc for TokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloservice.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "tokenChat",
			Handler:       _TokenService_TokenChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/peer-to-peer.proto",
}
